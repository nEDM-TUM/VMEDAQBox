# This Makefile needs the following variables defined if the defaults are
# not suitable (see code)
#  SOURCES -> Source files needed for compilation and auto-generation of deps
#  OBJECTS -> .o files needed
#  DICTHFILES -> Headers needed to generate the root dictionary
#
# Optionally, add or modify the following variables
#  INCLUDEFLAGS
#  LIBFLAGS


SILENT?=@

packageBase    := $(shell pwd)
SOURCEDIR      := $(packageBase)
BUILDDIR       := $(addprefix $(packageBase)/, build)
LIBDIR         := $(addprefix $(packageBase)/, ../lib)
EXEDIR         := $(addprefix $(packageBase)/, ../bin)
packageName    := $(notdir $(packageBase))
SHLIB          ?= $(LIBDIR)/lib$(packageName).$(SHREXT)
BASEEXE        ?= $(EXEDIR)/$(packageName)
INCLUDEFLAGS += $(DEFS) $(ROOT_INCLUDE) -I$(packageBase)
LIBFLAGS += $(LDFLAGS) $(ROOT_LIBS) $(LIBS) 
BUILDDIRCONF := $(BUILDDIR)/.build
BUILDBEGIN  := $(BUILDDIR)/.buildbegin

SHLIBSO := $(patsubst %.$(SHREXT), $(LIBDIR)/%.so, $(notdir $(SHLIB)))

SOURCES := $(wildcard *.cc)
OBJECTS := $(addprefix $(BUILDDIR)/, $(SOURCES:.cc=.o))
DEPCCFILES  := $(addprefix $(BUILDDIR)/,$(addsuffix .d,$(basename $(notdir $(SOURCES)))))
##############################################################################
# Define general rules for Make

# START_TRAP and END_TRAP should bookend commands, allowing all errors in the
# commands to be caught, and properly cleaned up.  That is, if make is
# interrupted by a user, or a command exits with an error status, this ensures
# that the script will still cleanup after itself.  At the moment, it only
# removes the BUILDBEGIN file, but could have more advanced behavior in the
# future. 
START_TRAP = set -e; trap "exit 1" INT TERM EXIT
END_TRAP = trap - INT TERM EXIT
ERASE_BUILDBEGIN = rm -f $(BUILDBEGIN)


# Making dependencies
# This uses gcc to auto-make the dependencies and then adds the .o and .d file
# to the dependency rule. As well, to avoid ``No rule to make target ...''
# errors, the .d file is parsed again to add empty targets for each file.  This
# enables Make not to fail when a file no longer exists.  See, e.g.
# http://mad-scientist.net/make/autodep.html#norule
MAKEDEPEND = $(SILENT)$(START_TRAP); rm -f $@; \
	$(CXX) $(CXXFLAGS) -MM $(INCLUDEFLAGS) $< > $@.$$$$;                                 \
        cp $@.$$$$ $@.temp.$$$$; sed -e 's/\#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
        -e '/^$$/ d' -e 's/$$/ :/' < $@.$$$$ >> $@.temp.$$$$;                         \
	sed 's,\($*\)\.o[ :]*,$(BUILDDIR)/\1.o $@ : ,g' < $@.temp.$$$$ > $@ ;          \
        rm -f $@*.$$$$;$(END_TRAP) 

MAKEOFILES = $(SILENT)$(START_TRAP); $(CXX) $(CXXFLAGS) $(INCLUDEFLAGS) -c -o $@ $<; $(END_TRAP) 

.PHONY: all depend lib clean static shared
.SECONDARY : $(BUILDDIRCONF) 
.INTERMEDIATE: $(BUILDBEGIN)

ifneq ($(MAKEEXE),)
all: exe
else
all: lib
endif

lib: shared

ifneq ($(SHREXT),so)
shared: $(SHLIB) $(SHLIBSO) 

$(SHLIBSO): $(SHLIB)
	$(SILENT)rm -rf $(SHLIBSO)
	$(SILENT)$(LN_S) $(SHLIB) $(SHLIBSO) 

else
shared: $(SHLIB)
endif

ifneq ($(MAKECMDGOALS),clean)
-include $(DEPCCFILES)
endif

exe: $(BASEEXE)

##############################################################################
# Dependencies
$(BUILDDIRCONF):
	$(SILENT)if [ ! -d $(BUILDDIR) ]; then $(mkdir_p) $(BUILDDIR); fi
	$(SILENT)touch $@


$(DEPCCFILES): $(BUILDDIR)/%.d : $(SOURCEDIR)/%.cc $(BUILDDIRCONF) 
	@echo "  [$(packageName)] Update dependencies........ $(<F)"
	$(MAKEDEPEND)


$(OBJECTS): $(BUILDDIR)/%.o: $(SOURCEDIR)/%.cc $(BUILDDIRCONF) 
	@echo "  [$(packageName)] Compiling file............. $(<F)"
	$(MAKEOFILES)


$(SHLIB): $(OBJECTS) 
	$(SILENT)if [ ! -d $(LIBDIR) ]; then $(mkdir_p) $(LIBDIR); fi
	@echo "  [$(packageName)] Building library........... $(@F)"
	$(SILENT)$(SOMAKER) $(SOFLAGS)$(@F) -Wl,-rpath,$(ORIGINFLAGS)\
         -o $(SHLIB) $^ $(LIBFLAGS)

$(BASEEXE): $(OBJECTS)
	$(SILENT)if [ ! -d $(EXEDIR) ]; then $(mkdir_p) $(EXEDIR); fi
	@echo "    Build executable........... $(@F)"
	$(SILENT)$(START_TRAP); $(CXX) -o $@ $^ $(LIBFLAGS); $(END_TRAP)

clean:
	@echo "  [$(packageName)] Cleaning"
	$(SILENT)rm -rf $(BUILDDIR)
	$(SILENT)rm -f $(SHLIB)



